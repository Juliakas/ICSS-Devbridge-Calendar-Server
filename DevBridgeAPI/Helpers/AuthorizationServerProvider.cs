// <auto-generated />

using DevBridgeAPI.Models;
using DevBridgeAPI.Repository.Dao;
using DevBridgeAPI.UseCases.Util;
using Microsoft.Owin.Security.OAuth;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

namespace DevBridgeAPI.Helpers
{
    public class AuthorizationServerProvider : OAuthAuthorizationServerProvider
    {
        public override async Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context)
        {
            context.Validated();
        }

        public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)
        {
            var identity = new ClaimsIdentity(context.Options.AuthenticationType);

            var userSelector = new UsersDao();

            //var userData = (User) userSelector.SelectOneRow(context.UserName, context.Password);
            var userData = (User)userSelector.SelectByEmail(context.UserName);
            
            if (userData != null && HashingUtil.VerifyPassword(context.Password, userData.Password))
            {
                //identity.AddClaim(new Claim(ClaimTypes.
                identity.AddClaim(new Claim(ClaimTypes.Name, userData.Email));
                context.Validated(identity);
            }
            else
            {
                context.SetError("invalid_grant", "Provided username and password is incorrect");
                context.Rejected();
            }
        }
    }
}
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously